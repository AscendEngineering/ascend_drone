import subprocess
import os

env = Environment() 

#path variables
doms_directory = 'third_party/ascend_doms/'
messaging_directory = doms_directory+'messaging/'
messaging_lib = messaging_directory+'libs/'
messaging_def = messaging_directory+'definitions/'

#create proto files
if(os.path.isdir(messaging_directory)):
    subprocess.check_call(["mkdir","-p", messaging_directory+"libs"])
    subprocess.check_call("protoc -I=" + messaging_def + " --cpp_out=" + messaging_lib + " " + messaging_def+'msgDef.proto', shell=True)
else:
    print("SUBMODULES NEED TO BE PULLED, EXECUTE IN TOP DIRECTORY: \"git submodule update --init --recursive\"")
    exit(1)

#drone files
drone_files = ['drone.cpp',
    'manual_control.cpp',
    'waypoints.cpp',
    'drone_msg.cpp',
    'px4_sensors.cpp',
    'external_sensors.cpp',
    'package_control.cpp'
    ]

#shared fields
doms_files = Glob(doms_directory + "*.cpp")
messaging_files = Glob(messaging_lib + '*.cc')

#misc
misc_files = ['third_party/loguru/loguru.cpp']

#opencv libraries
opencv_libs = ['opencv_core','opencv_dnn','opencv_features2d','opencv_flann',
    'opencv_gapi','opencv_highgui','opencv_imgcodecs','opencv_imgproc','opencv_photo',
    'opencv_videoio','opencv_video']


env=Environment(
    CPPDEFINES=[('LOGURU_WITH_STREAMS',1)],
    CCFLAGS=['-g',],
    LIBS=['zmq','protobuf','curses','mavsdk',
        'mavsdk_shell','mavsdk_action',
        'mavsdk_telemetry','mavsdk_offboard', 'mavsdk_log_files',
        'mavsdk_mission','mavsdk_calibration','mavsdk_mocap',
        'pthread','libboost_system','wiringPi','libcurl','dl','m',
        opencv_libs,'apriltag'],
	LIBPATH=['/usr/local/lib','/opt/vc/lib/',messaging_lib],
    CPPPATH=['include/','third_party/loguru','/usr/local/include/opencv4','/usr/local/include',
        '/usr/local/include/mavsdk',messaging_lib,
        doms_directory],
    SCONS_CXX_STANDARD='c++14')

#store *.o elsewhere
env.VariantDir('bin', 'src', duplicate=0)
drone_files = ['bin/'+path for path in drone_files]

#compile
env.Program('drone', ['bin/drone_main.cpp',drone_files, doms_files, messaging_files,misc_files])

#compile kill program
env.Program('kill_drone', ['bin/kill_drone.cpp',drone_files, doms_files, messaging_files,misc_files])
